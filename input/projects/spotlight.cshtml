---
title: .NET Foundation Project Spotlight
description: This month's .NET Foundation Project Spotlight
permalink: /projects/spotlight
useFunctionsJS: true
---

@{
	var qsValue = "";

	var projects = Outputs
		.FilterSources("projects/spotlight/*.yaml")
		.OrderByDescending(a => DateTime.Parse(a.GetValueOrDefault("publishDate", true).ToString()))
		.ToList();

		if (!string.IsNullOrEmpty(qsValue))
		{
			projects = projects.Where(a => a.GetValueOrDefault("projectName", true).ToString().ToUpperInvariant() ==qsValue.ToUpperInvariant()).ToList();
		}

		var project = projects.FirstOrDefault();
		Statiq.Common.IDocument[] projectOwners = project.Get<Statiq.Common.IDocument[]>("projectOwners");
		Statiq.Common.IDocument[] contributors = project.Get<Statiq.Common.IDocument[]>("contributors");

}
<section class="page-section page-section--purple">
    <div class="page-section_container container">
        <div class="page-section_row row">
          <div class="page-section_column col-12 text-center">
            <h1>
             @project.GetValueOrDefault("projectName", true).ToString()  <img src="assets/projects/@project.GetValueOrDefault("imageFileName", true).ToString().ToLowerInvariant()" width="100" alt="@project.GetValueOrDefault("projectName", true)">
            </h1>
			<br />

			<div id="project-description">
				<h3>
					Project Description
				</h3>
				@Html.Raw(@project.Get("projectDescription"))
			</div>
			<br />
			<div id="project-owners">
				<h3>Project Owners:</h3>
				<br />
					<ul class="comma-list">
			@foreach(var owner in projectOwners)
			{
				<li><a href="@owner.GetValueOrDefault("url", true)" target="_blank"><i class="fab fa-github" aria-hidden="true"></i> @owner.GetValueOrDefault("name", true)</a></li>
			}
</ul>
			</div>
    </div>
</section>

<section class="page-section page-section--purple--light">
    <div class="page-section_container container">
        <div class="page-section_row row">
          <div class="page-section_column col-12 text-center">
            <h1>
             Interview
            </h1>
			<br />
				<div id="project-interview">
				     <div class="video-iframe">
                         <div class="video-iframe-item">
                             <iframe width="560" height="315" src="@project.GetValueOrDefault("youtubeUrl",true)" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                         </div>
                     </div>
					<br />
					<br />
					<details>
						<summary>
    						Interview Transcript
						</summary>
						<br />
						<br />
						 @Html.Partial("spotlight/" + @project.GetValueOrDefault("transcriptFileName",true))
					</details>
				</div>
			</div>
          </div>
        </div>
    </div>
</section>

<section class="page-section page-section">
	<div class="page-section_container container">
		<div class="page-section_row row">
			<div class="page-section_column col-12 text-center">
				<h1>
					Get Involved
				</h1>
				<div class="card-columns" style="text-align:center">
					<div class="card bg-foundation">
						<div class="card-body">
							<h3 style="color: white;">Top 5 Contributors</h3>
							<div style="display: inline-block; text-align: left;">
								<p class="card-text">
								@foreach (var contributor in contributors)
									{
									<a style="color: white" href="@contributor.GetValueOrDefault("url", true)" target="_blank"><i style="color:white" class="fab fa-github" aria-hidden="true"></i> @contributor.GetValueOrDefault("name", true)</a>
									<br />
									<br />
									}
								</p>
							</div>
						</div>
					</div>
					<div style="color:white;" id="issues"></div>
					<div class="card bg-foundation">
						<div class="card-body">
							<h3 style="color: white;">References</h3>
							<p class="card-text">
								<a style="color: white" href="@project.GetValueOrDefault("githubRepo", true).ToString()" target="_blank">GitHub Repo</a>
							</p>
							<p class="card-text">
								<a style="color: white" href="@project.GetValueOrDefault("projectWebsite", true).ToString()" target="_blank">Project Website</a>
							</p>
							<p class="card-text">
								<a style="color: white" href="@project.GetValueOrDefault("communityUrl", true).ToString()" target="_blank">Community</a>
							</p>
							<p class="card-text">
								<a style="color: white" href="@project.GetValueOrDefault("documentationUrl", true).ToString()" target="_blank">Documentation</a>
							</p>
							<p class="card-text">
								<a style="color: white" href="@project.GetValueOrDefault("contributionUrl", true).ToString()" target="_blank">Contribute</a>
							</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<section class="page-section page-section">
    <div class="page-section_container container">
        <div class="page-section_row row">
          <div class="page-section_column col-12 text-center">
			  <h4>If you are an existing maintainer of a .NET Foundation project and want your project featured as a "Project Spotlight", feel free to enter a "Project Spotlight Issue" on the <a href="https://github.com/dotnet-foundation/projects/issues/new/choose" target="blank">Projects Repository of the .NET Foundation</a></h4>
		  </div>
		</div>
    </div>
</section>

<section class="page-section page-section--purple--light">
    <div class="page-section_container container">
        <div class="page-section_row row text-left">
            <div class="page-section_column col-12">
                <div id="SearchResults"></div>
                <div id="PresetProjects">
					<h1>Previous Spotlights</h1>
					@{
                        var list = Outputs
                            .FilterSources("projects/spotlight/*.yaml")
							.GroupBy(doc => char.IsLetter(doc.GetValueOrDefault("projectName", true).ToString().ToUpperInvariant().First()) ? doc.GetValueOrDefault("projectName", true).ToString().ToUpperInvariant().First() : '#' )
                            .OrderBy(g => g.Key)
                            .ToList();

                        var start = 0;
                    }
                    @while (start < list.Count)
                    {
                    <div class="row">
                        @foreach (var letterGroup in list.Skip(start).Take(3))
                        {
                            <div class="col-lg-4 col-sm-12 alph">
                                <hr />
                                <div class="alph-box">
                                    <div class="letter">@letterGroup.Key</div>
                                    <div class="list">
                                        @foreach(var proj in letterGroup.OrderBy(p => p.GetValueOrDefault("projectName", true).ToString()))
                                        {
                                        <a class="project-item" data-project="@proj.GetValueOrDefault("projectName", true).ToString()" href="/projects/spotlight?project=@proj.GetValueOrDefault("projectName", true).ToString().ToLowerInvariant()">@proj.GetValueOrDefault("projectName", true).ToString()</a>
                                        }
                                    </div>
                                </div>
                            </div>

                        }
                    </div>

                            start += 3;
                        }
				</div>
            </div>
        </div>
    </div>
</section>

<script type="text/javascript">
(async function () {
	const urlParams = new URLSearchParams(window.location.search);

	@* @{
		var projectName = urlParams.get('project');


	} *@
	const orgs = "@project.GetValueOrDefault("gitHubOrg", true)";
	const repos = [ "@project.GetValueOrDefault("gitHubRepoName", true)" ];

	loadOpenIssues(orgs, repos, true, "@project.GetValueOrDefault("gitHubRepoName", true)");

})();
</script>